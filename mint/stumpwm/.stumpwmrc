;; -*-lisp-*-
;;
;; Originally copied from /usr/share/doc/stumpwm/examples/sample-stumpwmrc.lisp

(in-package :stumpwm)

;;Window border colors
;(set-focus-color "red")
;(set-unfocus-color "black")
;; modeline foreground color
;(setf *mode-line-foreground-color* "palegreen3")
;; modeline border color
;;(setf *mode-line-border-color* "palegreen3")

(defcommand reinit () ()
  "Reloads .stumprc immediately"
  (run-commands "reload" "loadrc"))

(defparameter *start-menu*
  '(
    ;; ("Graphics"
    ;;  ("Color Picker"   "gcolor2")
    ;;  ("GIMP"           "gimp")
    ;;  ("Inkscape"       "inkscape")
    ;;  ("Picasa"         "picasa")
    ;;  ("Scanner"        "xsane")
    ;;  ("OCR"            "gocr"))

    ("Sound and Video"
     ("Europe 1"      "mplayer http://vipicecast.yacast.net/europe1")
     ("RTL"           "mplayer http://streaming.radio.rtl.fr/rtl-1-44-96")
     ("Mixer"         "xterm -rv -e alsamixer")
     ("K3b Burner"    "k3b")
     ("Eject CD-ROM"  "eject cdrom"))

    ("System Tools"
     ("Calculator"        "speedcrunch")
     ("File Manager"      "nautilus")  ; thunar
     ("Power Preferences" "gnome-power-preferences")
     ("Printers"          "system-config-printer")
     ("Terminal Server"   "tsclient")
         ; Turn on "Enable window manager's key bindings" for prefix key to
         ; be passed seamlessly (when *not* in full screen).
         ; Toggle between full screen and not full screen using
         ; `Ctrl-Alt-Enter'.

     ;; > In the case of Rdesktop you have to launch the app with the option
     ;; > '-K' so Stump can retain control over the key combinations that you
     ;; > input inside the remote session.

     ("VirtualBox"       "VirtualBox"))

    ("X Windows Tools"
     ("Clipboard"  "xclipboard")
     ("Fonts"      "xfontsel")
     ("Ruler"      "kruler")
     ("Events"     "xev"))
    ))

(defcommand menu () ()
  "docstring"
  (labels ((pick (options)
                 (let ((selection (stumpwm::select-from-menu
                                   (current-screen) options "")))
                   (cond
                    ((null selection)
                     (throw 'stumpwm::error "Abort."))
                    ((stringp (second selection))
                     (second selection))
                    (t
                     (pick (cdr selection)))))))
    (let ((choice (pick *start-menu*)))
      (run-shell-command choice))))

;; run-or-raise will start a new instance or switch to it, if it is already running.
(defcommand dev-browser () ()
  (run-or-raise "google-chrome" '(:class "dev-browser")))

(defcommand browser () ()
  (run-or-raise "conkeror" '(:class "browser")))

(defcommand terminal () ()
  (run-or-raise "gnome-terminal" '(:instance "terminal")))

(define-key *root-map* (kbd ".") "menu")

(define-key *root-map* (kbd "C-/") "banish")

(define-key *root-map* (kbd "b") "browser")

(define-key *root-map* (kbd "d") "dev-browser")

(define-key *root-map* (kbd "RET") "terminal")

(define-key *root-map* (kbd "C-q") "quit")

;; change the prefix key to something else
;;(set-prefix-key (kbd "Super_L"))

;; ;; prompt the user for an interactive command. The first arg is an
;; ;; optional initial contents.
;; (defcommand colon1 (&optional (initial "")) (:rest)
;;   (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
;;     (when cmd
;;       (eval-command cmd t))))

;; ;; Read some doc
;; (define-key *root-map* (kbd "d") "exec gv")
;; ;; Browse somewhere
;; (define-key *root-map* (kbd "b") "colon1 exec x-www-browser http://www.")
;; ;; Ssh somewhere
;; (define-key *root-map* (kbd "C-s") "colon1 exec x-terminal-emulator -e ssh ")
;; ;; Lock screen
;; (define-key *root-map* (kbd "C-l") "exec xlock")

;; ;; Web jump (works for Google and Imdb)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,name (search) ((:rest ,(concatenate 'string name " search: ")))
;;     (substitute #\+ #\Space search)
;;     (run-shell-command (concatenate 'string ,prefix search))))

;; (make-web-jump "google" "x-www-browser http://www.google.fr/search?q=")
;; (make-web-jump "imdb" "x-www-browser http://www.imdb.com/find?q=")

;; ;; C-t M-s is a terrble binding, but you get the idea.
;; (define-key *root-map* (kbd "M-s") "google")
;; (define-key *root-map* (kbd "i") "imdb")

;; ;; Message window font
;; (set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;; ;;; Define window placement policy...

;; ;; Clear rules
;; (clear-window-placement-rules)

;; ;; Last rule to match takes precedence!
;; ;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; ;; match is performed.
;; ;; TIP: if the :create flag is set then a missing group will be created and
;; ;; restored from *data-dir*/create file.
;; ;; TIP: if the :restore flag is set then group dump is restored even for an
;; ;; existing group using *data-dir*/restore file.
;; (define-frame-preference "Default"
;;   ;; frame raise lock (lock AND raise == jumpto)
;;   (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
;;   (1 t nil :class "XTerm"))

;; (define-frame-preference "Ardour"
;;   (0 t   t   :instance "ardour_editor" :type :normal)
;;   (0 t   t   :title "Ardour - Session Control")
;;   (0 nil nil :class "XTerm")
;;   (1 t   nil :type :normal)
;;   (1 t   t   :instance "ardour_mixer")
;;   (2 t   t   :instance "jvmetro")
;;   (1 t   t   :instance "qjackctl")
;;   (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

;; (define-frame-preference "Shareland"
;;   (0 t   nil :class "XTerm")
;;   (1 nil t   :class "aMule"))

;; (define-frame-preference "Emacs"
;;   (1 t t :restore "emacs-editing-dump" :title "...xdvi")
;;   (0 t t :create "emacs-dump" :class "Emacs"))
